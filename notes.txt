different auth choices(least->most complex):

- session
- JWT
- OAuth(in-house, SaaS)
- Other/Ad-hoc

authentication- knowing who the user is
authorization- already know who the user is, but who has access to what resource.

passport- a middleware that lets user authenticate using diff strategies. 
we can build our own auth strategies on top of passport. 
middleware that allows devs to create other middlewares to create strategies 

HTTP headers:
metadata about an http req

related to authentication:

cookie: cookie header of req.
set-cookie header: cookie header of response

both work together to form a server side session.

HTTP is a stateless protocol-> it doesnt remember the activities on the website unless we make it remember in some way. 

google stores user info in cookies so user doesnt need to login to google everytime he visits.

the cookies that get returned from res on first call are sent to google.com in next ping. 


cookie vs session: 
cookie is stored in browser and attached to every http req
session is stored and managed on server and is accessed using sone secret


JWT:
to implement jwt, can do using symmetric cryptography (create a string, store in .env use it to sign JWT; encrypt, decrypt), or public key cryptography(asymmetric cryptogrphy- has pub and priv keys associated with it, also used in cryptocurrency). 

elliptic curve cryptography: 
- "trap door fn": can get priv from pub key, not vice versa

pvt key encryption can be used to create digital sigfnatures
some document where we sign digitally

reqs:
the document must not be tampered  
person concerned has only signed it, not anyone

VV imp: 
never put confidential data inside 'to-be digitally signed' object
(CC, SSN, etc)

